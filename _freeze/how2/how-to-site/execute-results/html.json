{
  "hash": "8c5d335ac497631812283da5257484d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \"José R. Ferrer Paris\"\ntitle: \"This is how we built this!\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n## No place like home\n\nThis is a a personal website for ***jrfep***, and it consists of multiple repositories. \n\n### How to make an entrance\n\nI created a [presentation](https://jrfep.github.io/) using [Reveal.js](https://revealjs.com) and placed it in my personal github repo: <https://github.com/jrfep/jrfep.github.io>. The README of that repo contains instruction for re-creating the intro presentation.\n\n:::{.aside}\nThis now sits in the `alpha-centaury` branch. Older versions of my site are available in other branches.\n\n\nMy [other branch](https://github.com/jrfep/jrfep.github.io/tree/jekyll) uses Jekyll (but I gave up on that some time ago, so do not expect any updates).\n\nI [also tried](https://github.com/jrfep/jrfep.github.io/tree/mrhyde) Rmarkdown for some time, might get back to that if this one does not work. \n\nI was tempted to create a multi-lingual site using [babelquarto](https://github.com/ropensci-review-tools/babelquarto):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('babelquarto', repos = c('https://ropensci.r-universe.dev', 'https://cloud.r-project.org'))\n```\n:::\n\n\nBut it was a short-lived experiment. I think it could work for simple sites, but would require more tweaks to make it work with my current site. \n:::\n\n### Multilingual\n\nAs you can read (or not), these instructions are in English, but this site has content in multiple languages... I know it is confusing, but this is how I work. If you require clarifications please open an issue or send me a message. \n\nAfter much experimentation, I finally decided to open independent repos for my [Spanish](https://github.com/jrfep/esp) and [English](https://github.com/jrfep/eng) content. \n\nBoth repos use [Quarto](https://quarto.org/docs/websites/) to build the sub-sites, and they are only connected by external links.\n\n## Libraries\n\nTo manage and update the version of libraries that we need, I used `renv` for some iterations, but it was complex to keep version across machines and different OSs...\n\nWhen we use `renv` we need to run different commands, until all the changes have been synchronised[^1]:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::init()\nrenv::status()\nrenv::install()\nrenv::status()\nrenv::snapshot()\n```\n:::\n\n\nBut if we don't update the .gitignore file things can get messy.\n\n## Render site\n\nWith Rmarkdown we could run this (in RStudio) to render site locally:\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render_site()\n```\n:::\n\n\nOr preview one file\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render_site(\"presentations.Rmd\")\n```\n:::\n\n\nWith quarto and RStudio we can open the Build tab and select Build Website...\n\nOr we can go to the command line and render the site: \n\n\n::: {.cell}\n\n```{.sh .cell-code}\nquarto render \n```\n:::\n\n\nSing [All the rowboats](https://youtu.be/2CZ8ossU4pc) in the meantime (optional).\n\nAnd then launch a preview:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nquarto preview\n```\n:::\n\n\nIf this work, we can just `git add`, `git commit` and `git push` it to the repo and see the changes!\n\n\n## Font Awesome\n\nThey work well out of the box with Rmarkdown, but for quarto we need to install an extension.\n\nSwitch to the repository folder and checkout the git branch we are working on, and then:\n\n```sh\nquarto install extension quarto-ext/fontawesome\n```\n\n:::{.aside}\nBut I am using bootstrap icon in this site, so I did not activate this extension here.\n:::\n\nUse `{{{< fa smile >}}}` or `{{{< fa lemon >}}}` in the text to show the fonts. \n\n## Just in case\n\n![ [Stand back, I know regular expressions.](https://xkcd.com/208/)](https://imgs.xkcd.com/comics/regular_expressions.png)\n\n\n[^1]: Yes, [I know...](https://english.stackexchange.com/questions/230494/should-i-always-use-the-ised-ending-for-uk-english-and-the-ized-for-us)\n\n## Prepare data for some pages\n\n### Bibliography\n\nFor the bibliography, I downloaded one `csl` as a base style:\n\n```{.bash}\ncd bibteX\nwget 'https://www.zotero.org/styles/journal-and-proceedings-of-the-royal-society-of-new-south-wales?source=1' --output-document=my.csl\n```\n\nModify sort order of the bibliography (not the citation...):\n\n```{.xml}\n<bibliography hanging-indent=\"true\" entry-spacing=\"0\">\n    <sort>\n      <key variable=\"issued\" sort=\"descending\"/>\n      <key macro=\"author\"/>\n    </sort>\n  ...\n```\n\nAnd voilà!\n\n### OSF data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"how2/how-to-site.qmd\")\nif (!require(osfr)) {\n  install.packages(\"osfr\")\n  library(osfr)\n}\nlst_osf <- osf_retrieve_user(\"me\") %>%\n  osf_ls_nodes()\nif (!dir.exists(here::here(\"data\")))\n    dir.create(here::here(\"data\"))\nfile_name <- here::here(\"data\",\"OSF-data.rds\")\nsaveRDS(file=file_name, lst_osf)\n```\n:::\n\n\n\n### GitHub data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"how2/how-to-site.qmd\")\nif (!require(jsonlite)) {\n  install.packages(\"jsonlite\")\n  library(jsonlite)\n}\ngh_rle_org <- read_json(\"https://api.github.com/orgs/red-list-ecosystem/repos\")\ngh_ces_org <- read_json(\"https://api.github.com/orgs/ces-unsw-edu-au/repos\")\ngh_jrfep <- read_json(\"https://api.github.com/users/jrfep/repos\")\n# https://api.github.com/search/repositories?q=user:jrfep&fork:false\n# for each repo query the languages_url and summarise the lines of code for each language\nfile_name <- here::here(\"data\",\"GitHub-data.rda\")\nsave(file=file_name, gh_rle_org, gh_ces_org, gh_jrfep)\n```\n:::\n\n\n### Flexdashboard and iNaturalist\n\nI use to have a dashboard here, but it works better with Rmarkdown than with quarto. SO I moved it to another site/repo.\n\nThere might be some alternatives in quarto for this, but haven't tested them yet.\n\nThat OLD dashboard was inspired by this example:\nhttps://github.com/gonzalobravoargentina/inat_flexdashboard_ARG\n\nTo get the data I first install the `rinat` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"how2/how-to-site.qmd\")\nif (!require(rinat)) {\n  install.packages(\"rinat\")\n  library(rinat)\n}\n```\n:::\n\n\nThen I can download the observations from iNaturalist and save them in a data folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download observations and save to RDS file\nuser_obs <- get_inat_obs_user(\"NeoMapas\",maxresults = 5000)\nif (!dir.exists(here::here(\"data\")))\n    dir.create(here::here(\"data\"))\nfile_name <- here::here(\"data\",\"iNaturalist-obs-NeoMapas.rds\")\nsaveRDS(file=file_name, user_obs)\n```\n:::\n\n\nTo get the logo\n\nWith `wget` and ImageMagick, it is easy to download and resize in the terminal (`bash`) with two lines of code:\n\n```sh\n##mkdir \nwget https://neomapas.github.io/assets/images/logo_NeoMapas_p.gif\nmagick logo_NeoMapas_p.gif  -resize 100x148  resize_logo.gif\n```\n\n### Photos from Flickr\n\n> So, I think I need some photos in my website, and I have a Flickr account, and I use R, there should be a library that...\n\nYes, there is!. And I actually wrote a [blog-entry](https://jrfep.quarto.pub/the-spatial-one/posts/foto-collection.html) about this.\n\n\n### Photos from google \n\nThis took me a bit longer to figure out. Basically:\n\n1. I created a project in google cloud, \n2. enabled Photos Library API (not sure if this is relevant here),\n3. configured a simple consent page, \n4. created a OAuth 2.0 client ID and downloaded the json file.\n5. added `GC_PROJECT_EMAIL` and `GC_PROJECT_CRED_JSON` to my .Renviron file\n6. Then wrote some lines of code to do the authentication steps with library `gargle` and the queries with library `httr`.\n\nI wrote a detailed, step-by-step [explanation here](https://jrfep.quarto.pub/explicado/Rcode/google-photos.html).\n\nThis is the code...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gargle)\nlibrary(dplyr)\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(foreach)\nlibrary(stringr)\n\nreadRenviron(\"~/.Renviron\")\ncred_json <- Sys.getenv(\"GC_PROJECT_CRED_JSON\")\nif (!file.exists(cred_json)) {\n  stop(\"credentials not found, please update Renviron file\")\n} else {\n  clnt <- gargle_oauth_client_from_json(path=cred_json)\n}\n\ntkn <- gargle2.0_token(\n  email = Sys.getenv(\"GC_PROJECT_EMAIL\"),\n  client = clnt,\n  scope = c(\"https://www.googleapis.com/auth/photoslibrary.readonly\",\n            \"https://www.googleapis.com/auth/photoslibrary.sharing\")\n)\nk <- token_fetch(token=tkn)\nauthorization = paste('Bearer', k$credentials$access_token)\n\ngetalbum <-\n  GET(\"https://photoslibrary.googleapis.com/v1/albums\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      query = list(\"pageSize\" = 50)) %>% \n  content(., as = \"text\", encoding = \"UTF-8\") %>%\n  fromJSON(.) \nif (!is.null(getalbum$nextPageToken)) {\n  getalbum2 <-\n    GET(\"https://photoslibrary.googleapis.com/v1/albums\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      query = list(\"pageToken\" = getalbum$nextPageToken)) %>% \n    content(., as = \"text\", encoding = \"UTF-8\") %>%\n    fromJSON(.) \n}\n\nalbum_info <- getalbum$albums %>% select(id, title)\n#aIDs <- getalbum %>% filter(albums.shareInfo.isJoined) %>% pull(albums.id)\nlugares <- c(\"Lugares - México\", \"Lugares - Europa\", \"Lugares - Sur América\", \"Eventos - Venezuela\")\neventos <- c(\"Eventos - CEBA LEE\", \"Eventos - RLE\", \"Eventos - Venezuela\", \"Eventos - Mariposas\", \"Eventos - IVIC\")\naIDs <- album_info %>% filter(title %in% c(lugares, eventos)) %>% pull(id)\n\nphotos <- foreach(aID=aIDs, .combine = \"bind_rows\") %do% {\n  dts <-  POST(\"https://photoslibrary.googleapis.com/v1/mediaItems:search\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      body = list(\"albumId\" = aID,\n                  \"pageSize\" = 50),\n      encode = \"json\"\n      ) %>% \n    content(., as = \"text\", encoding = \"UTF-8\") %>%\n    fromJSON(., flatten = TRUE) %>% \n    data.frame()\n  dts$album <- album_info %>% filter(id %in% aID) %>% pull(title)\n  dts <- dts %>% \n    mutate(\n      output_file = str_replace_all(mediaItems.description, \"[ ,/]+\", \"-\"),\n      output_id = abbreviate(mediaItems.id))\n  dts \n}\n\nhere::i_am(\"how2/how-to-site.qmd\")\nimg_folder <- here::here(\"lgrs\",\"img\")\nif (!dir.exists(img_folder))\n  dir.create(img_folder)\n\nfor (i in seq(along=photos$mediaItems.id)[photos$album %in% lugares]) {\n  photo <- photos %>% slice(i)\n  durl <- sprintf(\"%s=w400-h400-d\", photo$mediaItems.baseUrl)\n  dfile <- sprintf(\"%s/%s-%s.jpg\",img_folder, photo$output_id, photo$output_file)\n  if (!file.exists(dfile))\n    download.file(url=durl, destfile=dfile)\n}\n\nimg_folder <- here::here(\"evnts\",\"img\")\nif (!dir.exists(img_folder))\n  dir.create(img_folder)\nfor (i in seq(along=photos$mediaItems.id)[photos$album %in% eventos]) {\n  photo <- photos %>% slice(i)\n  durl <- sprintf(\"%s=w400-h400-d\", photo$mediaItems.baseUrl)\n  dfile <- sprintf(\"%s/%s-%s.jpg\",img_folder, photo$output_id, photo$output_file)\n  if (!file.exists(dfile))\n    download.file(url=durl, destfile=dfile)\n}\n\nfile_name <- here::here(\"data\",\"google-photos.rds\")\nsaveRDS(file=file_name, photos)\n```\n:::\n\n\n\n### Galleries with `pixture`\n\nI am experimenting with the [pixture package](https://www.royfrancis.com/pixture/index.html) to create image galleries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"htmlwidgets\",\"shiny\",\"remotes\"))\nremotes::install_github('royfrancis/pixture')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}